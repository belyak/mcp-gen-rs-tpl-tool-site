name: Deploy Enhanced Jekyll to GitHub Pages

on:
  push:
    branches: [ main, master ]
    paths:
      - 'README.md'
      - 'docs/**'
      - 'jekyll-site/**'
      - '.github/workflows/deploy-jekyll.yml'
  workflow_dispatch:
  schedule:
    # Daily update at 00:00 UTC for GitHub stats sync
    - cron: '0 0 * * *'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      pages-url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Create Enhanced Jekyll Structure
        run: |
          echo "🏗️ Creating modern Jekyll site structure..."
          mkdir -p jekyll-site
          cd jekyll-site
          
          # Enhanced _config.yml with modern features
          cat > _config.yml << 'EOF'
          title: "MCP Rust Template Tool"
          description: "Современный шаблон для создания Model Context Protocol (MCP) серверов на Rust с интеграцией в Claude Desktop"
          baseurl: "/mcp-claude-stdio-template"
          url: "https://${{ github.repository_owner }}.github.io"
          
          repository: "${{ github.repository }}"
          github_username: ${{ github.repository_owner }}
          
          theme: jekyll-theme-cayman
          remote_theme: pages-themes/cayman@v0.2.0
          
          plugins:
            - jekyll-feed
            - jekyll-sitemap
            - jekyll-seo-tag
            - jekyll-relative-links
            - jekyll-optional-front-matter
            - jekyll-readme-index
            - jekyll-default-layout
            - jekyll-titles-from-headings
            - jekyll-github-metadata
          
          markdown: kramdown
          kramdown:
            input: GFM
            syntax_highlighter: rouge
            syntax_highlighter_opts:
              css_class: 'highlight'
              block:
                line_numbers: true
          
          highlighter: rouge
          
          lang: ru-RU
          author: "Andrei Beliak"
          
          social_links:
            github: ${{ github.repository_owner }}
          
          # Enhanced collections
          collections:
            docs:
              output: true
              permalink: /:collection/:name/
            examples:
              output: true
              permalink: /:collection/:name/
          
          defaults:
            - scope:
                path: ""
                type: "docs"
              values:
                layout: "doc"
            - scope:
                path: ""
                type: "examples"
              values:
                layout: "example"
          
          exclude:
            - target/
            - test-gen*/
            - Cargo.lock
            - "*.log"
            - "*.jsonl"
            - Gemfile
            - Gemfile.lock
            - node_modules
            - vendor/
            - README.md.old
            - test_template.sh
            - install_mcp.sh
            - justfile
            - LICENSE
          
          include:
            - .htaccess
            - _pages
          
          sass:
            sass_dir: _sass
            style: compressed
            load_paths:
              - _sass
              - node_modules
          
          timezone: Europe/Moscow
          
          # GitHub metadata
          github: [metadata]
          
          # Enhanced features
          features:
            dark_mode: true
            smooth_scroll: true
            search: true
            analytics: true
          EOF
          
          # Enhanced Gemfile with more plugins
          cat > Gemfile << 'EOF'
          source "https://rubygems.org"
          
          gem "jekyll", "~> 4.3.0"
          gem "jekyll-theme-cayman"
          gem "jekyll-feed"
          gem "jekyll-sitemap"
          gem "jekyll-seo-tag"
          gem "jekyll-relative-links"
          gem "jekyll-optional-front-matter"
          gem "jekyll-readme-index"
          gem "jekyll-default-layout"
          gem "jekyll-titles-from-headings"
          gem "jekyll-github-metadata"
          gem "jekyll-paginate-v2"
          gem "jekyll-archives"
          gem "jekyll-tagging"
          gem "jekyll-responsive-image"
          
          group :jekyll_plugins do
            gem "jekyll-feed"
            gem "jekyll-sitemap"
            gem "jekyll-seo-tag"
            gem "jekyll-relative-links"
            gem "jekyll-optional-front-matter"
            gem "jekyll-readme-index"
            gem "jekyll-default-layout"
            gem "jekyll-titles-from-headings"
            gem "jekyll-github-metadata"
            gem "jekyll-paginate-v2"
            gem "jekyll-archives"
            gem "jekyll-tagging"
            gem "jekyll-responsive-image"
          end
          
          platforms :mingw, :x64_mingw, :mswin, :jruby do
            gem "tzinfo", ">= 1", "< 3"
            gem "tzinfo-data"
          end
          
          gem "wdm", "~> 0.1.1", :platforms => [:mingw, :x64_mingw, :mswin]
          gem "http_parser.rb", "~> 0.6.0", :platforms => [:jruby]
          EOF

      - name: Create Advanced Layouts
        run: |
          cd jekyll-site
          mkdir -p _layouts _includes _sass assets/css assets/js _data docs _examples
          
          # Enhanced default layout
          cat > _layouts/default.html << 'EOF'
          <!DOCTYPE html>
          <html lang="{{ site.lang | default: 'en-US' }}">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="X-UA-Compatible" content="ie=edge">
            
            {% seo %}
            
            <link rel="preconnect" href="https://fonts.googleapis.com">
            <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
            <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
            <link rel="stylesheet" href="{{ '/assets/css/style.css?v=' | append: site.github.build_revision | relative_url }}">
            
            <!-- Favicon -->
            <link rel="icon" type="image/svg+xml" href="{{ '/assets/images/favicon.svg' | relative_url }}">
            
            <!-- Theme color -->
            <meta name="theme-color" content="#667eea">
            
            <!-- Open Graph -->
            <meta property="og:image" content="{{ '/assets/images/og-image.png' | absolute_url }}">
            
            <!-- PWA manifest -->
            <link rel="manifest" href="{{ '/manifest.json' | relative_url }}">
          </head>
          <body class="page-{{ page.layout | default: 'default' }}" data-theme="auto">
            <!-- Skip to content -->
            <a class="skip-link" href="#main-content">Skip to main content</a>
            
            <!-- Progress bar -->
            <div class="progress-bar" id="progressBar"></div>
            
            <!-- Navigation -->
            {% include navigation.html %}
            
            <!-- Theme toggle -->
            <button class="theme-toggle" id="themeToggle" aria-label="Toggle dark mode">
              <span class="theme-toggle-icon"></span>
            </button>
            
            <!-- Main content -->
            <main id="main-content" class="main-content" role="main">
              {{ content }}
            </main>
            
            <!-- Footer -->
            {% include footer.html %}
            
            <!-- Search overlay -->
            {% include search.html %}
            
            <!-- Scripts -->
            <script src="{{ '/assets/js/main.js' | relative_url }}"></script>
            {% if jekyll.environment == 'production' %}
              <!-- Analytics -->
              {% include analytics.html %}
            {% endif %}
          </body>
          </html>
          EOF
          
          # Documentation layout
          cat > _layouts/doc.html << 'EOF'
          ---
          layout: default
          ---
          
          <div class="doc-container">
            <aside class="doc-sidebar">
              {% include doc-nav.html %}
            </aside>
            
            <article class="doc-content">
              <header class="doc-header">
                <h1 class="doc-title">{{ page.title }}</h1>
                {% if page.description %}
                  <p class="doc-description">{{ page.description }}</p>
                {% endif %}
                <div class="doc-meta">
                  <time datetime="{{ page.date | date_to_xmlschema }}">
                    {{ page.date | date: "%B %d, %Y" }}
                  </time>
                  {% if page.author %}
                    <span class="doc-author">by {{ page.author }}</span>
                  {% endif %}
                </div>
              </header>
              
              <div class="doc-body">
                {{ content }}
              </div>
              
              <footer class="doc-footer">
                {% include doc-pagination.html %}
                {% include edit-page.html %}
              </footer>
            </article>
            
            <aside class="doc-toc">
              {% include table-of-contents.html %}
            </aside>
          </div>
          EOF

      - name: Create Modern Components
        run: |
          cd jekyll-site
          
          # Enhanced navigation
          cat > _includes/navigation.html << 'EOF'
          <nav class="main-nav" role="navigation" aria-label="Main navigation">
            <div class="nav-container">
              <a href="{{ '/' | relative_url }}" class="nav-logo">
                <img src="{{ '/assets/images/logo.svg' | relative_url }}" alt="{{ site.title }}" width="32" height="32">
                <span class="nav-title">{{ site.title }}</span>
              </a>
              
              <div class="nav-menu" id="navMenu">
                <a href="{{ '/' | relative_url }}" class="nav-link {% if page.url == '/' %}active{% endif %}">
                  <span class="nav-icon">��</span>
                  Home
                </a>
                <a href="{{ '/docs/' | relative_url }}" class="nav-link {% if page.url contains 'docs' %}active{% endif %}">
                  <span class="nav-icon">📚</span>
                  Docs
                </a>
                <a href="{{ '/examples/' | relative_url }}" class="nav-link {% if page.url contains 'examples' %}active{% endif %}">
                  <span class="nav-icon">💡</span>
                  Examples
                </a>
                <a href="{{ site.github.repository_url }}" class="nav-link external" target="_blank" rel="noopener">
                  <span class="nav-icon">📁</span>
                  GitHub
                </a>
                
                <!-- Search trigger -->
                <button class="nav-search" id="searchTrigger" aria-label="Search">
                  <span class="nav-icon">🔍</span>
                </button>
              </div>
              
              <button class="nav-toggle" id="navToggle" aria-label="Toggle navigation">
                <span class="hamburger"></span>
              </button>
            </div>
          </nav>
          EOF
          
          # Search component
          cat > _includes/search.html << 'EOF'
          <div class="search-overlay" id="searchOverlay">
            <div class="search-container">
              <div class="search-header">
                <input type="search" class="search-input" id="searchInput" placeholder="Search documentation..." autocomplete="off">
                <button class="search-close" id="searchClose" aria-label="Close search">×</button>
              </div>
              <div class="search-results" id="searchResults">
                <div class="search-empty">
                  <span class="search-icon">🔍</span>
                  <p>Start typing to search...</p>
                </div>
              </div>
            </div>
          </div>
          EOF
          
          # Table of contents
          cat > _includes/table-of-contents.html << 'EOF'
          <div class="toc-container">
            <h3 class="toc-title">Table of Contents</h3>
            <nav class="toc-nav" id="tableOfContents">
              <!-- Generated by JavaScript -->
            </nav>
          </div>
          EOF

      - name: Create Ultra-Modern CSS
        run: |
          cd jekyll-site
          
          # Main stylesheet with advanced features
          cat > assets/css/style.scss << 'EOF'
          ---
          ---
          
          @import "{{ site.theme }}";
          
          // CSS Custom Properties for theming
          :root {
            // Colors - Light theme (More vibrant and interesting)
            --color-primary: #8b5cf6;
            --color-primary-light: #a78bfa;
            --color-primary-dark: #7c3aed;
            --color-secondary: #06d6a0;
            --color-accent: #ff6b6b;
            --color-success: #20bf6b;
            --color-warning: #f7b801;
            --color-error: #eb4d4b;
            --color-info: #3742fa;
            --color-pink: #fd79a8;
            --color-orange: #fd7f28;
            --color-teal: #00cec9;
            
            // Gradient colors
            --gradient-primary: linear-gradient(135deg, #8b5cf6, #06d6a0);
            --gradient-secondary: linear-gradient(135deg, #ff6b6b, #feca57);
            --gradient-accent: linear-gradient(135deg, #3742fa, #8b5cf6);
            --gradient-rainbow: linear-gradient(135deg, #ff6b6b, #feca57, #48dbfb, #ff9ff3, #54a0ff);
            
            // Backgrounds
            --bg-primary: #ffffff;
            --bg-secondary: #f8fafc;
            --bg-tertiary: #f1f5f9;
            --bg-overlay: rgba(15, 23, 42, 0.8);
            --bg-glass: rgba(255, 255, 255, 0.1);
            --bg-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            
            // Text colors
            --text-primary: #2d3748;
            --text-secondary: #4a5568;
            --text-tertiary: #718096;
            --text-inverse: #ffffff;
            
            // Borders
            --border-color: #e2e8f0;
            --border-color-light: #f1f5f9;
            --border-radius: 0.75rem;
            --border-radius-sm: 0.5rem;
            --border-radius-lg: 1rem;
            
            // Shadows
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            
            // Spacing
            --space-xs: 0.25rem;
            --space-sm: 0.5rem;
            --space-md: 1rem;
            --space-lg: 1.5rem;
            --space-xl: 2rem;
            --space-2xl: 3rem;
            --space-3xl: 4rem;
            
            // Typography
            --font-family-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            --font-family-mono: 'JetBrains Mono', 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace;
            
            --font-size-xs: 0.75rem;
            --font-size-sm: 0.875rem;
            --font-size-base: 1rem;
            --font-size-lg: 1.125rem;
            --font-size-xl: 1.25rem;
            --font-size-2xl: 1.5rem;
            --font-size-3xl: 1.875rem;
            --font-size-4xl: 2.25rem;
            --font-size-5xl: 3rem;
            
            --line-height-tight: 1.25;
            --line-height-normal: 1.5;
            --line-height-relaxed: 1.75;
            
            // Transitions
            --transition-fast: 150ms ease;
            --transition-normal: 250ms ease;
            --transition-slow: 500ms ease;
            
            // Z-index scale
            --z-overlay: 1000;
            --z-modal: 1010;
            --z-tooltip: 1020;
            --z-toast: 1030;
          }
          
          // Dark theme (Enhanced with vibrant accents)
          [data-theme="dark"] {
            // Keep the same vibrant primary colors but adjust backgrounds
            --color-primary: #a78bfa;
            --color-primary-light: #c4b5fd;
            --color-primary-dark: #8b5cf6;
            --color-secondary: #34d399;
            --color-accent: #fbbf24;
            
            // Dark backgrounds with subtle color hints
            --bg-primary: #0f0f23;
            --bg-secondary: #1a1a2e;
            --bg-tertiary: #16213e;
            --bg-overlay: rgba(0, 0, 0, 0.9);
            --bg-glass: rgba(139, 92, 246, 0.1);
            --bg-gradient: linear-gradient(135deg, #16213e 0%, #0f3460 100%);
            
            --text-primary: #f8fafc;
            --text-secondary: #e2e8f0;
            --text-tertiary: #cbd5e1;
            
            --border-color: #2d3748;
            --border-color-light: #4a5568;
            
            // Enhanced gradients for dark mode
            --gradient-primary: linear-gradient(135deg, #a78bfa, #34d399);
            --gradient-secondary: linear-gradient(135deg, #ff6b6b, #fbbf24);
            --gradient-accent: linear-gradient(135deg, #60a5fa, #a78bfa);
          }
          
          // Base styles reset
          *, *::before, *::after {
            box-sizing: border-box;
          }
          
          html {
            scroll-behavior: smooth;
            scroll-padding-top: 5rem;
          }
          
          body {
            font-family: var(--font-family-sans);
            font-size: var(--font-size-base);
            line-height: var(--line-height-normal);
            color: var(--text-primary);
            background-color: var(--bg-primary);
            margin: 0;
            padding: 0;
            transition: background-color var(--transition-normal), color var(--transition-normal);
            overflow-x: hidden;
          }
          
          // Skip link for accessibility
          .skip-link {
            position: absolute;
            top: -40px;
            left: 6px;
            background: var(--color-primary);
            color: var(--text-inverse);
            padding: 8px;
            text-decoration: none;
            border-radius: var(--border-radius-sm);
            transition: top var(--transition-fast);
            z-index: calc(var(--z-toast) + 1);
            
            &:focus {
              top: 6px;
            }
          }
          
          // Progress bar
          .progress-bar {
            position: fixed;
            top: 0;
            left: 0;
            width: 0%;
            height: 3px;
            background: linear-gradient(90deg, var(--color-primary), var(--color-secondary));
            z-index: var(--z-toast);
            transition: width var(--transition-normal);
          }
          
          // Enhanced Navigation with glass morphism
          .main-nav {
            position: fixed;
            top: 0;
            width: 100%;
            background: rgba(255, 255, 255, 0.85);
            backdrop-filter: blur(20px) saturate(180%);
            border-bottom: 1px solid rgba(139, 92, 246, 0.2);
            z-index: var(--z-modal);
            transition: all var(--transition-normal);
            
            [data-theme="dark"] & {
              background: rgba(15, 15, 35, 0.85);
              border-bottom-color: rgba(167, 139, 250, 0.3);
            }
            
            &::before {
              content: '';
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: var(--gradient-primary);
              opacity: 0;
              transition: opacity var(--transition-normal);
            }
            
            &.scrolled::before {
              opacity: 0.05;
            }
          }
          
          .nav-container {
            max-width: 1280px;
            margin: 0 auto;
            padding: 0 var(--space-md);
            display: flex;
            align-items: center;
            justify-content: space-between;
            height: 4rem;
          }
          
          .nav-logo {
            display: flex;
            align-items: center;
            gap: var(--space-sm);
            text-decoration: none;
            color: var(--text-primary);
            font-weight: 600;
            transition: transform var(--transition-fast);
            
            &:hover {
              transform: scale(1.05);
            }
            
            img {
              border-radius: var(--border-radius-sm);
            }
          }
          
          .nav-menu {
            display: flex;
            align-items: center;
            gap: var(--space-lg);
            
            @media (max-width: 768px) {
              position: fixed;
              top: 4rem;
              left: 0;
              width: 100%;
              flex-direction: column;
              background: var(--bg-primary);
              border-bottom: 1px solid var(--border-color);
              padding: var(--space-lg);
              transform: translateY(-100%);
              opacity: 0;
              transition: all var(--transition-normal);
              
              &.open {
                transform: translateY(0);
                opacity: 1;
              }
            }
          }
          
          .nav-link {
            display: flex;
            align-items: center;
            gap: var(--space-xs);
            padding: var(--space-sm) var(--space-md);
            border-radius: var(--border-radius);
            text-decoration: none;
            color: var(--text-secondary);
            font-weight: 500;
            transition: all var(--transition-fast);
            position: relative;
            
            &:hover, &.active {
              color: var(--color-primary);
              background: var(--bg-secondary);
            }
            
            &.external::after {
              content: '↗';
              font-size: var(--font-size-xs);
              opacity: 0.7;
            }
          }
          
          .nav-search, .nav-toggle {
            background: none;
            border: none;
            padding: var(--space-sm);
            border-radius: var(--border-radius);
            cursor: pointer;
            color: var(--text-secondary);
            transition: all var(--transition-fast);
            
            &:hover {
              background: var(--bg-secondary);
              color: var(--color-primary);
            }
          }
          
          .nav-toggle {
            display: none;
            
            @media (max-width: 768px) {
              display: block;
            }
          }
          
          .hamburger {
            display: block;
            width: 20px;
            height: 2px;
            background: currentColor;
            position: relative;
            transition: background var(--transition-fast);
            
            &::before, &::after {
              content: '';
              position: absolute;
              width: 100%;
              height: 2px;
              background: currentColor;
              transition: all var(--transition-fast);
            }
            
            &::before { top: -6px; }
            &::after { bottom: -6px; }
            
            .nav-toggle.open & {
              background: transparent;
              
              &::before {
                transform: rotate(45deg);
                top: 0;
              }
              
              &::after {
                transform: rotate(-45deg);
                bottom: 0;
              }
            }
          }
          
          // Theme toggle with modern design
          .theme-toggle {
            position: fixed;
            bottom: var(--space-lg);
            right: var(--space-lg);
            width: 3.5rem;
            height: 3.5rem;
            border-radius: 50%;
            border: none;
            background: var(--gradient-primary);
            color: var(--text-inverse);
            cursor: pointer;
            box-shadow: 0 8px 32px rgba(139, 92, 246, 0.3);
            transition: all var(--transition-normal);
            z-index: var(--z-modal);
            backdrop-filter: blur(10px);
            
            &::before {
              content: '';
              position: absolute;
              inset: -2px;
              background: var(--gradient-rainbow);
              border-radius: inherit;
              opacity: 0;
              transition: opacity var(--transition-normal);
              z-index: -1;
            }
            
            &:hover {
              transform: scale(1.15) rotate(180deg);
              box-shadow: 0 12px 48px rgba(139, 92, 246, 0.4);
              
              &::before {
                opacity: 1;
                animation: rotate 3s linear infinite;
              }
            }
            
            &:active {
              transform: scale(1.05) rotate(180deg);
            }
          }
          
          .theme-toggle-icon {
            display: block;
            font-size: 1.5rem;
            transition: transform var(--transition-normal);
            
            &::before {
              content: '🌙';
              
              [data-theme="dark"] & {
                content: '☀️';
              }
            }
          }
          
          // Main content
          .main-content {
            margin-top: 4rem;
            min-height: calc(100vh - 4rem);
          }
          
          // Enhanced Hero Section with animated background
          .hero-section {
            background: var(--gradient-primary);
            color: var(--text-inverse);
            padding: var(--space-3xl) var(--space-md);
            text-align: center;
            position: relative;
            overflow: hidden;
            min-height: 60vh;
            display: flex;
            align-items: center;
            justify-content: center;
            
            &::before {
              content: '';
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Cg fill-opacity='0.03'%3E%3Cpolygon fill='%23ffffff' points='50 0 60 40 100 50 60 60 50 100 40 60 0 50 40 40'/%3E%3C/g%3E%3C/svg%3E") center/80px;
              animation: float 8s ease-in-out infinite;
              z-index: 1;
            }
            
            &::after {
              content: '';
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: radial-gradient(circle at 30% 70%, rgba(255, 107, 107, 0.3) 0%, transparent 50%),
                          radial-gradient(circle at 70% 30%, rgba(52, 211, 153, 0.3) 0%, transparent 50%),
                          radial-gradient(circle at 80% 80%, rgba(167, 139, 250, 0.3) 0%, transparent 50%);
              animation: colorShift 12s ease-in-out infinite;
              z-index: 1;
            }
            
            .hero-content {
              position: relative;
              z-index: 2;
              max-width: 900px;
              margin: 0 auto;
            }
            
            h1 {
              font-size: clamp(var(--font-size-3xl), 5vw, var(--font-size-5xl));
              font-weight: 700;
              margin-bottom: var(--space-lg);
              line-height: var(--line-height-tight);
              background: linear-gradient(45deg, #ffffff, #f0f0f0);
              -webkit-background-clip: text;
              -webkit-text-fill-color: transparent;
              background-clip: text;
              text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            }
            
            .hero-subtitle {
              font-size: var(--font-size-xl);
              margin-bottom: var(--space-2xl);
              opacity: 0.95;
              line-height: var(--line-height-relaxed);
              text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
            }
            
            .hero-actions {
              display: flex;
              gap: var(--space-md);
              justify-content: center;
              flex-wrap: wrap;
            }
          }
          
          @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            33% { transform: translateY(-20px) rotate(120deg); }
            66% { transform: translateY(-10px) rotate(240deg); }
          }
          
          @keyframes colorShift {
            0%, 100% { opacity: 0.3; }
            50% { opacity: 0.6; }
          }
          
          // Enhanced Buttons with exciting hover effects
          .btn {
            display: inline-flex;
            align-items: center;
            gap: var(--space-sm);
            padding: var(--space-md) var(--space-xl);
            border: 2px solid transparent;
            border-radius: var(--border-radius);
            font-weight: 600;
            text-decoration: none;
            transition: all var(--transition-normal);
            cursor: pointer;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
            
            &::before {
              content: '';
              position: absolute;
              top: 0;
              left: -100%;
              width: 100%;
              height: 100%;
              background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
              transition: left var(--transition-slow);
            }
            
            &::after {
              content: '';
              position: absolute;
              top: 50%;
              left: 50%;
              width: 0;
              height: 0;
              background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, transparent 70%);
              transition: all var(--transition-normal);
              transform: translate(-50%, -50%);
              border-radius: 50%;
            }
            
            &:hover {
              transform: translateY(-3px) scale(1.05);
              box-shadow: var(--shadow-xl);
              
              &::before {
                left: 100%;
              }
              
              &::after {
                width: 200px;
                height: 200px;
              }
            }
            
            &:active {
              transform: translateY(-1px) scale(1.02);
            }
          }
          
          .btn-primary {
            background: var(--gradient-primary);
            color: var(--text-inverse);
            border-color: var(--color-primary);
            
            &:hover {
              background: var(--gradient-accent);
              border-color: var(--color-primary-dark);
              box-shadow: 0 8px 25px rgba(139, 92, 246, 0.4);
            }
          }
          
          .btn-secondary {
            background: var(--gradient-secondary);
            color: var(--text-inverse);
            border-color: var(--color-secondary);
            
            &:hover {
              background: var(--gradient-primary);
              border-color: var(--color-accent);
              box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
            }
          }
          
          .btn-outline {
            background: transparent;
            color: var(--color-primary);
            border-color: var(--color-primary);
            backdrop-filter: blur(10px);
            
            &:hover {
              background: var(--gradient-primary);
              color: var(--text-inverse);
              border-color: transparent;
              box-shadow: 0 8px 25px rgba(139, 92, 246, 0.3);
            }
          }
          
          // Grid layouts with better responsive behavior
          .grid {
            display: grid;
            gap: var(--space-lg);
            
            &.grid-2 {
              grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            }
            
            &.grid-3 {
              grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            }
            
            &.grid-4 {
              grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            }
          }
          
          // Enhanced Cards with colorful accents
          .card {
            background: var(--bg-primary);
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius-lg);
            padding: var(--space-xl);
            transition: all var(--transition-normal);
            box-shadow: var(--shadow);
            position: relative;
            overflow: hidden;
            
            &::before {
              content: '';
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 4px;
              background: var(--gradient-rainbow);
              transform: scaleX(0);
              transition: transform var(--transition-normal);
              transform-origin: left;
            }
            
            &::after {
              content: '';
              position: absolute;
              top: -50%;
              right: -50%;
              width: 200%;
              height: 200%;
              background: conic-gradient(from 0deg, 
                rgba(139, 92, 246, 0.05) 0deg,
                rgba(255, 107, 107, 0.05) 90deg,
                rgba(52, 211, 153, 0.05) 180deg,
                rgba(251, 191, 36, 0.05) 270deg,
                rgba(139, 92, 246, 0.05) 360deg);
              opacity: 0;
              transition: opacity var(--transition-slow);
            }
            
            &:hover {
              transform: translateY(-8px) rotate(1deg);
              box-shadow: 0 20px 40px rgba(139, 92, 246, 0.15);
              border-color: var(--color-primary);
              
              &::before {
                transform: scaleX(1);
              }
              
              &::after {
                opacity: 1;
                animation: rotate 20s linear infinite;
              }
            }
            
            .card-icon {
              font-size: 2.5rem;
              margin-bottom: var(--space-md);
              background: var(--gradient-primary);
              -webkit-background-clip: text;
              -webkit-text-fill-color: transparent;
              background-clip: text;
              display: inline-block;
              transition: transform var(--transition-normal);
            }
            
            &:hover .card-icon {
              transform: scale(1.2) rotate(10deg);
            }
            
            .card-title {
              font-size: var(--font-size-xl);
              font-weight: 600;
              margin-bottom: var(--space-sm);
              color: var(--text-primary);
              position: relative;
              z-index: 1;
            }
            
            .card-description {
              color: var(--text-secondary);
              line-height: var(--line-height-relaxed);
              position: relative;
              z-index: 1;
            }
          }
          
          @keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
          }
          
          // Statistics cards with vibrant animations
          .stat-card {
            text-align: center;
            background: var(--bg-primary);
            border: 2px solid transparent;
            background-clip: padding-box;
            position: relative;
            
            &::before {
              content: '';
              position: absolute;
              inset: 0;
              padding: 2px;
              background: var(--gradient-rainbow);
              border-radius: inherit;
              mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
              mask-composite: exclude;
              -webkit-mask-composite: xor;
            }
            
            &:hover {
              transform: translateY(-8px) scale(1.05);
              
              &::before {
                animation: borderGlow 2s ease-in-out infinite;
              }
            }
            
            .stat-number {
              font-size: var(--font-size-4xl);
              font-weight: 700;
              background: var(--gradient-primary);
              -webkit-background-clip: text;
              -webkit-text-fill-color: transparent;
              background-clip: text;
              margin-bottom: var(--space-sm);
              animation: countUp 2s ease-out, pulse 3s ease-in-out infinite 2s;
              display: block;
            }
            
            .stat-label {
              font-size: var(--font-size-sm);
              color: var(--text-tertiary);
              text-transform: uppercase;
              font-weight: 500;
              letter-spacing: 0.05em;
            }
          }
          
          @keyframes countUp {
            from { 
              transform: scale(0.5); 
              opacity: 0; 
            }
            to { 
              transform: scale(1); 
              opacity: 1; 
            }
          }
          
          @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
          }
          
          @keyframes borderGlow {
            0%, 100% { 
              filter: hue-rotate(0deg) brightness(1); 
            }
            50% { 
              filter: hue-rotate(180deg) brightness(1.2); 
            }
          }
          
          // Enhanced search
          .search-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--bg-overlay);
            backdrop-filter: blur(8px);
            z-index: var(--z-overlay);
            opacity: 0;
            visibility: hidden;
            transition: all var(--transition-normal);
            
            &.open {
              opacity: 1;
              visibility: visible;
            }
          }
          
          .search-container {
            position: absolute;
            top: 10%;
            left: 50%;
            transform: translateX(-50%);
            width: 90%;
            max-width: 600px;
            background: var(--bg-primary);
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow-xl);
            overflow: hidden;
          }
          
          .search-header {
            display: flex;
            align-items: center;
            padding: var(--space-md);
            border-bottom: 1px solid var(--border-color);
          }
          
          .search-input {
            flex: 1;
            border: none;
            outline: none;
            font-size: var(--font-size-lg);
            background: transparent;
            color: var(--text-primary);
            
            &::placeholder {
              color: var(--text-tertiary);
            }
          }
          
          .search-close {
            background: none;
            border: none;
            font-size: var(--font-size-2xl);
            color: var(--text-secondary);
            cursor: pointer;
            padding: var(--space-sm);
            border-radius: var(--border-radius);
            transition: all var(--transition-fast);
            
            &:hover {
              background: var(--bg-secondary);
              color: var(--text-primary);
            }
          }
          
          .search-results {
            max-height: 400px;
            overflow-y: auto;
            padding: var(--space-md);
          }
          
          .search-empty {
            text-align: center;
            padding: var(--space-xl);
            color: var(--text-tertiary);
            
            .search-icon {
              font-size: 3rem;
              margin-bottom: var(--space-md);
              opacity: 0.5;
            }
          }
          
          // Code blocks with better styling
          .highlight {
            position: relative;
            border-radius: var(--border-radius-lg);
            margin: var(--space-lg) 0;
            box-shadow: var(--shadow);
            overflow: hidden;
            
            &::before {
              content: attr(data-lang);
              position: absolute;
              top: 0;
              right: 0;
              padding: var(--space-xs) var(--space-sm);
              background: var(--color-primary);
              color: var(--text-inverse);
              font-size: var(--font-size-xs);
              font-family: var(--font-family-mono);
              text-transform: uppercase;
              letter-spacing: 0.05em;
            }
          }
          
          pre {
            margin: 0;
            padding: var(--space-xl);
            font-family: var(--font-family-mono);
            font-size: var(--font-size-sm);
            line-height: var(--line-height-relaxed);
            overflow-x: auto;
            background: var(--bg-tertiary);
            
            code {
              background: none;
              padding: 0;
              border-radius: 0;
            }
          }
          
          code {
            font-family: var(--font-family-mono);
            font-size: 0.9em;
            background: var(--bg-secondary);
            padding: 0.2em 0.4em;
            border-radius: var(--border-radius-sm);
            color: var(--color-primary);
          }
          
          // Responsive utilities
          @media (max-width: 768px) {
            .hero-section {
              padding: var(--space-2xl) var(--space-md);
            }
            
            .grid {
              gap: var(--space-md);
            }
            
            .card {
              padding: var(--space-lg);
            }
            
            .theme-toggle {
              bottom: var(--space-md);
              right: var(--space-md);
            }
          }
          
          // Print styles
          @media print {
            .main-nav,
            .theme-toggle,
            .search-overlay {
              display: none !important;
            }
            
            .main-content {
              margin-top: 0;
            }
            
            .card {
              break-inside: avoid;
            }
          }
          
          // Accessibility improvements
          @media (prefers-reduced-motion: reduce) {
            *, *::before, *::after {
              animation-duration: 0.01ms !important;
              animation-iteration-count: 1 !important;
              transition-duration: 0.01ms !important;
            }
          }
          
          // Focus styles
          :focus-visible {
            outline: 2px solid var(--color-primary);
            outline-offset: 2px;
          }
          
          // Selection styles
          ::selection {
            background: var(--color-primary);
            color: var(--text-inverse);
          }
          EOF

      - name: Create Interactive JavaScript
        run: |
          cd jekyll-site
          
          # Advanced JavaScript functionality
          cat > assets/js/main.js << 'EOF'
          // Theme management
          class ThemeManager {
            constructor() {
              this.theme = localStorage.getItem('theme') || 'auto';
              this.init();
            }
            
            init() {
              this.applyTheme();
              this.bindEvents();
            }
            
            bindEvents() {
              const toggle = document.getElementById('themeToggle');
              if (toggle) {
                toggle.addEventListener('click', () => this.toggleTheme());
              }
            }
            
            applyTheme() {
              if (this.theme === 'auto') {
                const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                document.documentElement.setAttribute('data-theme', prefersDark ? 'dark' : 'light');
              } else {
                document.documentElement.setAttribute('data-theme', this.theme);
              }
            }
            
            toggleTheme() {
              const currentTheme = document.documentElement.getAttribute('data-theme');
              const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
              this.theme = newTheme;
              localStorage.setItem('theme', newTheme);
              this.applyTheme();
            }
          }
          
          // Navigation management
          class NavigationManager {
            constructor() {
              this.nav = document.querySelector('.main-nav');
              this.toggle = document.getElementById('navToggle');
              this.menu = document.getElementById('navMenu');
              this.init();
            }
            
            init() {
              this.bindEvents();
              this.handleScroll();
            }
            
            bindEvents() {
              if (this.toggle && this.menu) {
                this.toggle.addEventListener('click', () => this.toggleMenu());
              }
              
              window.addEventListener('scroll', () => this.handleScroll());
              window.addEventListener('resize', () => this.closeMenu());
            }
            
            toggleMenu() {
              this.toggle.classList.toggle('open');
              this.menu.classList.toggle('open');
            }
            
            closeMenu() {
              this.toggle.classList.remove('open');
              this.menu.classList.remove('open');
            }
            
            handleScroll() {
              if (window.scrollY > 100) {
                this.nav.style.background = 'rgba(255, 255, 255, 0.98)';
                this.nav.style.boxShadow = '0 1px 20px rgba(0, 0, 0, 0.1)';
              } else {
                this.nav.style.background = 'rgba(255, 255, 255, 0.95)';
                this.nav.style.boxShadow = 'none';
              }
              
              // Update progress bar
              const progress = document.getElementById('progressBar');
              if (progress) {
                const windowHeight = document.documentElement.scrollHeight - window.innerHeight;
                const scrolled = (window.scrollY / windowHeight) * 100;
                progress.style.width = scrolled + '%';
              }
            }
          }
          
          // Search functionality
          class SearchManager {
            constructor() {
              this.overlay = document.getElementById('searchOverlay');
              this.trigger = document.getElementById('searchTrigger');
              this.close = document.getElementById('searchClose');
              this.input = document.getElementById('searchInput');
              this.results = document.getElementById('searchResults');
              this.searchData = [];
              this.init();
            }
            
            init() {
              this.bindEvents();
              this.loadSearchData();
            }
            
            bindEvents() {
              if (this.trigger) {
                this.trigger.addEventListener('click', () => this.openSearch());
              }
              
              if (this.close) {
                this.close.addEventListener('click', () => this.closeSearch());
              }
              
              if (this.overlay) {
                this.overlay.addEventListener('click', (e) => {
                  if (e.target === this.overlay) this.closeSearch();
                });
              }
              
              if (this.input) {
                this.input.addEventListener('input', (e) => this.performSearch(e.target.value));
              }
              
              document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') this.closeSearch();
                if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                  e.preventDefault();
                  this.openSearch();
                }
              });
            }
            
            openSearch() {
              if (this.overlay) {
                this.overlay.classList.add('open');
                if (this.input) {
                  setTimeout(() => this.input.focus(), 100);
                }
              }
            }
            
            closeSearch() {
              if (this.overlay) {
                this.overlay.classList.remove('open');
                if (this.input) this.input.value = '';
                this.showEmptyState();
              }
            }
            
            async loadSearchData() {
              try {
                // This would typically load from a search index
                this.searchData = [
                  { title: 'Getting Started', url: '/docs/getting-started/', content: 'Quick start guide' },
                  { title: 'Configuration', url: '/docs/configuration/', content: 'Setup and configuration' },
                  { title: 'Examples', url: '/examples/', content: 'Code examples and tutorials' }
                ];
              } catch (error) {
                console.error('Failed to load search data:', error);
              }
            }
            
            performSearch(query) {
              if (!query.trim()) {
                this.showEmptyState();
                return;
              }
              
              const results = this.searchData.filter(item =>
                item.title.toLowerCase().includes(query.toLowerCase()) ||
                item.content.toLowerCase().includes(query.toLowerCase())
              );
              
              this.displayResults(results, query);
            }
            
            displayResults(results, query) {
              if (!this.results) return;
              
              if (results.length === 0) {
                this.results.innerHTML = `
                  <div class="search-empty">
                    <span class="search-icon">🔍</span>
                    <p>No results found for "${query}"</p>
                  </div>
                `;
                return;
              }
              
              this.results.innerHTML = results.map(result => `
                <a href="${result.url}" class="search-result">
                  <h4>${this.highlightMatch(result.title, query)}</h4>
                  <p>${this.highlightMatch(result.content, query)}</p>
                </a>
              `).join('');
            }
            
            highlightMatch(text, query) {
              const regex = new RegExp(`(${query})`, 'gi');
              return text.replace(regex, '<mark>$1</mark>');
            }
            
            showEmptyState() {
              if (this.results) {
                this.results.innerHTML = `
                  <div class="search-empty">
                    <span class="search-icon">🔍</span>
                    <p>Start typing to search...</p>
                  </div>
                `;
              }
            }
          }
          
          // Table of Contents generator
          class TOCManager {
            constructor() {
              this.container = document.getElementById('tableOfContents');
              this.headings = document.querySelectorAll('h2, h3, h4, h5, h6');
              this.init();
            }
            
            init() {
              if (this.container && this.headings.length > 0) {
                this.generateTOC();
                this.bindEvents();
              }
            }
            
            generateTOC() {
              const toc = document.createElement('ul');
              toc.className = 'toc-list';
              
              this.headings.forEach((heading, index) => {
                const id = heading.id || `heading-${index}`;
                heading.id = id;
                
                const li = document.createElement('li');
                li.className = `toc-item toc-${heading.tagName.toLowerCase()}`;
                
                const a = document.createElement('a');
                a.href = `#${id}`;
                a.textContent = heading.textContent;
                a.className = 'toc-link';
                
                li.appendChild(a);
                toc.appendChild(li);
              });
              
              this.container.appendChild(toc);
            }
            
            bindEvents() {
              const links = this.container.querySelectorAll('.toc-link');
              links.forEach(link => {
                link.addEventListener('click', (e) => {
                  e.preventDefault();
                  const target = document.querySelector(link.getAttribute('href'));
                  if (target) {
                    target.scrollIntoView({ behavior: 'smooth' });
                  }
                });
              });
              
              // Highlight current section
              window.addEventListener('scroll', () => this.updateActiveSection());
            }
            
            updateActiveSection() {
              const scrollPosition = window.scrollY + 100;
              
              this.headings.forEach(heading => {
                const link = this.container.querySelector(`a[href="#${heading.id}"]`);
                if (link) {
                  if (heading.offsetTop <= scrollPosition) {
                    this.container.querySelectorAll('.toc-link').forEach(l => l.classList.remove('active'));
                    link.classList.add('active');
                  }
                }
              });
            }
          }
          
          // GitHub stats loader
          class GitHubStats {
            constructor() {
              this.repo = window.location.pathname.split('/')[1];
              this.owner = 'your-username'; // This should be dynamic
              this.init();
            }
            
            async init() {
              try {
                const response = await fetch(`https://api.github.com/repos/${this.owner}/${this.repo}`);
                const data = await response.json();
                this.updateStats(data);
              } catch (error) {
                console.error('Failed to load GitHub stats:', error);
                this.showFallbackStats();
              }
            }
            
            updateStats(data) {
              const elements = {
                stars: document.getElementById('github-stars'),
                forks: document.getElementById('github-forks'),
                issues: document.getElementById('github-issues')
              };
              
              if (elements.stars) elements.stars.textContent = data.stargazers_count || '0';
              if (elements.forks) elements.forks.textContent = data.forks_count || '0';
              if (elements.issues) elements.issues.textContent = data.open_issues_count || '0';
              
              // Animate numbers
              this.animateNumbers();
            }
            
            animateNumbers() {
              const statNumbers = document.querySelectorAll('.stat-number');
              statNumbers.forEach(stat => {
                const target = parseInt(stat.textContent) || 0;
                this.animateValue(stat, 0, target, 1000);
              });
            }
            
            animateValue(element, start, end, duration) {
              const range = end - start;
              const increment = range / (duration / 16);
              let current = start;
              
              const timer = setInterval(() => {
                current += increment;
                if (current >= end) {
                  current = end;
                  clearInterval(timer);
                }
                element.textContent = Math.floor(current);
              }, 16);
            }
            
            showFallbackStats() {
              const fallbacks = {
                'github-stars': 'N/A',
                'github-forks': 'N/A', 
                'github-issues': 'N/A'
              };
              
              Object.entries(fallbacks).forEach(([id, value]) => {
                const element = document.getElementById(id);
                if (element) element.textContent = value;
              });
            }
          }
          
          // Smooth scroll for anchor links
          class SmoothScroll {
            constructor() {
              this.init();
            }
            
            init() {
              document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', (e) => {
                  e.preventDefault();
                  const target = document.querySelector(anchor.getAttribute('href'));
                  if (target) {
                    target.scrollIntoView({
                      behavior: 'smooth',
                      block: 'start'
                    });
                  }
                });
              });
            }
          }
          
          // Initialize everything when DOM is ready
          document.addEventListener('DOMContentLoaded', () => {
            new ThemeManager();
            new NavigationManager();
            new SearchManager();
            new TOCManager();
            new GitHubStats();
            new SmoothScroll();
            
            // Add loading states
            document.body.classList.add('loaded');
          });
          
          // Service Worker for PWA functionality
          if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
              navigator.serviceWorker.register('/sw.js')
                .then((registration) => {
                  console.log('SW registered: ', registration);
                })
                .catch((registrationError) => {
                  console.log('SW registration failed: ', registrationError);
                });
            });
          }
          EOF

      - name: Create Enhanced Content
        run: |
          cd jekyll-site
          
          # Create the main index page with better structure
          cat > index.md << 'EOF'
          ---
          layout: default
          title: "MCP Rust Template Tool"
          description: "Современный шаблон для создания Model Context Protocol (MCP) серверов на Rust"
          ---
          
          <div class="hero-section">
            <div class="hero-content">
              <h1>🚀 MCP Rust Template Tool</h1>
              <p class="hero-subtitle">Современный шаблон для создания Model Context Protocol (MCP) серверов на Rust с полной интеграцией в Claude Desktop</p>
              
              <div class="hero-actions">
                <a href="https://github.com/${{ github.repository }}" class="btn btn-primary">
                  📁 GitHub Repository
                </a>
                <a href="#quick-start" class="btn btn-secondary">
                  🏁 Быстрый старт
                </a>
                <a href="/docs/" class="btn btn-secondary">
                  📖 Документация
                </a>
              </div>
            </div>
          </div>
          
          <div style="max-width: 1200px; margin: 0 auto; padding: 0 1rem;">
            
            ## ✨ Ключевые особенности
            
            <div class="grid grid-3" style="margin: 3rem 0;">
              <div class="card">
                <div class="card-icon">🔧</div>
                <h3 class="card-title">Готов к использованию</h3>
                <p class="card-description">Полнофункциональный MCP сервер из коробки с поддержкой всех основных функций протокола</p>
              </div>
              
              <div class="card">
                <div class="card-icon">📋</div>
                <h3 class="card-title">JSON-RPC 2.0</h3>
                <p class="card-description">Полная реализация спецификации MCP с поддержкой всех стандартных методов</p>
              </div>
              
              <div class="card">
                <div class="card-icon">🛠️</div>
                <h3 class="card-title">Три типа функций</h3>
                <p class="card-description">Prompts, Resources и Tools - все необходимые компоненты для создания мощных AI агентов</p>
              </div>
              
              <div class="card">
                <div class="card-icon">🧪</div>
                <h3 class="card-title">Автотесты</h3>
                <p class="card-description">Встроенное тестирование, CI/CD pipeline и автоматическая проверка шаблона</p>
              </div>
              
              <div class="card">
                <div class="card-icon">🖥️</div>
                <h3 class="card-title">Claude Desktop</h3>
                <p class="card-description">Готовая интеграция с Claude Desktop на macOS с автоматической установкой</p>
              </div>
              
              <div class="card">
                <div class="card-icon">⚡</div>
                <h3 class="card-title">Производительность</h3>
                <p class="card-description">Оптимизированная сборка для production с минимальным потреблением ресурсов</p>
              </div>
            </div>
            
            ## 🚀 Быстрый старт {#quick-start}
            
            ### Создание нового проекта
            
            ```bash
            # 1. Установите cargo-generate
            cargo install cargo-generate
            
            # 2. Создайте проект из шаблона
            cargo generate --git https://github.com/${{ github.repository }}
            
            # 3. Перейдите в созданный проект
            cd your-project-name
            
            # 4. Соберите проект
            cargo build --release
            
            # 5. Запустите тесты
            cargo test
            ```
            
            ### Интеграция с Claude Desktop
            
            ```bash
            # Автоматическая установка и настройка
            ./install_mcp.sh
            ```
            
            ## �� Проектная статистика
            
            <div class="grid grid-4" style="margin: 3rem 0;">
              <div class="stat-card card">
                <div class="stat-number" id="github-stars">Loading...</div>
                <div class="stat-label">⭐ GitHub Stars</div>
              </div>
              <div class="stat-card card">
                <div class="stat-number" id="github-forks">Loading...</div>
                <div class="stat-label">🍴 Forks</div>
              </div>
              <div class="stat-card card">
                <div class="stat-number" id="github-issues">Loading...</div>
                <div class="stat-label">🐛 Issues</div>
              </div>
              <div class="stat-card card">
                <div class="stat-number">Rust</div>
                <div class="stat-label">📊 Language</div>
              </div>
            </div>
            
            ## 🛠️ Архитектура
            
            <div class="card" style="margin: 2rem 0; padding: 2rem; text-align: center;">
              <pre style="background: none; text-align: left; max-width: 600px; margin: 0 auto;">
            Claude Desktop
                  ↓ JSON-RPC
              MCP Server
                  ↓
                Router
               ╱  |  ╲
           Prompts Resources Tools
              |       |       |
          prompts.json resources.json tools.json
              </pre>
            </div>
            
            ## 🎯 Примеры использования
            
            ### Создание простого инструмента
            
            ```rust
            pub async fn current_time(request: CurrentTimeRequest) -> HandlerResult<CallToolResult> {
                let city = request.city.unwrap_or_else(|| "UTC".to_string());
                let result = format!("Current time in {}: {}", city, chrono::Local::now().to_rfc2822());
                
                Ok(CallToolResult {
                    content: vec![CallToolResultContent::Text { text: result }],
                    is_error: false,
                })
            }
            ```
            
            ### Конфигурация инструмента
            
            ```json
            {
              "name": "get_current_time_in_city",
              "description": "Получить текущее время в указанном городе",
              "inputSchema": {
                "type": "object",
                "properties": {
                  "city": {
                    "type": "string",
                    "description": "Название города"
                  }
                },
                "required": ["city"]
              }
            }
            ```
            
            ## 📚 Документация
            
            <div class="grid grid-2" style="margin: 3rem 0;">
              <a href="/docs/architecture/" class="card" style="text-decoration: none; color: inherit;">
                <div class="card-icon">🏗️</div>
                <h4 class="card-title">Архитектура</h4>
                <p class="card-description">Подробное описание структуры проекта и компонентов</p>
              </a>
              
              <a href="/docs/configuration/" class="card" style="text-decoration: none; color: inherit;">
                <div class="card-icon">⚙️</div>
                <h4 class="card-title">Конфигурация</h4>
                <p class="card-description">Настройка промптов, ресурсов и инструментов</p>
              </a>
              
              <a href="/docs/integration/" class="card" style="text-decoration: none; color: inherit;">
                <div class="card-icon">🔗</div>
                <h4 class="card-title">Интеграция</h4>
                <p class="card-description">Подключение к Claude Desktop и другим клиентам</p>
              </a>
              
              <a href="/docs/development/" class="card" style="text-decoration: none; color: inherit;">
                <div class="card-icon">🛠️</div>
                <h4 class="card-title">Разработка</h4>
                <p class="card-description">Руководство по разработке и расширению функциональности</p>
              </a>
            </div>
            
            ## 📈 Дорожная карта
            
            <div class="card" style="margin: 2rem 0;">
              <ul style="list-style: none; padding: 0;">
                <li style="margin: 1rem 0; display: flex; align-items: center;">
                  <span style="color: #10b981; margin-right: 0.5rem;">✅</span>
                  <strong>v0.1.0</strong> - Базовый функционал MCP сервера
                </li>
                <li style="margin: 1rem 0; display: flex; align-items: center;">
                  <span style="color: #f59e0b; margin-right: 0.5rem;">🔄</span>
                  <strong>v0.2.0</strong> - Поддержка WebSocket соединений
                </li>
                <li style="margin: 1rem 0; display: flex; align-items: center;">
                  <span style="color: #6b7280; margin-right: 0.5rem;">⏳</span>
                  <strong>v0.3.0</strong> - Интеграция с базами данных
                </li>
                <li style="margin: 1rem 0; display: flex; align-items: center;">
                  <span style="color: #6b7280; margin-right: 0.5rem;">⏳</span>
                  <strong>v0.4.0</strong> - Веб-интерфейс для управления
                </li>
                <li style="margin: 1rem 0; display: flex; align-items: center;">
                  <span style="color: #6b7280; margin-right: 0.5rem;">⏳</span>
                  <strong>v0.5.0</strong> - Система плагинов
                </li>
              </ul>
            </div>
